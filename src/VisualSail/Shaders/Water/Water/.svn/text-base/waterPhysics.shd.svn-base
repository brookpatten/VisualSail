[Vertex shader]

struct VS_OUTPUT {
   float4 Pos: POSITION;
   float2 t0: TEXCOORD0;
   float2 t1: TEXCOORD1;
   float2 t2: TEXCOORD2;
   float2 t3: TEXCOORD3;
   float2 t4: TEXCOORD4;
};

float off;

VS_OUTPUT main(float4 pos: POSITION, float2 tc: TEXCOORD0){
   VS_OUTPUT Out;

   Out.Pos = pos;
   Out.t0 = tc;
   Out.t1 = tc + float2(-off, -off);
   Out.t2 = tc + float2(-off,  off);
   Out.t3 = tc + float2( off, -off);
   Out.t4 = tc + float2( off,  off);

   return Out;
}


[Fragment shader]

sampler Tex: register(s0);

float4 main(float2 t0: TEXCOORD0, float2 t1: TEXCOORD1, float2 t2: TEXCOORD2, float2 t3: TEXCOORD3, float2 t4: TEXCOORD4) : COLOR {
	float4 hv = tex2D(Tex, t0);
	float  s1 = tex2D(Tex, t1);
	float  s2 = tex2D(Tex, t2);
	float  s3 = tex2D(Tex, t3);
	float  s4 = tex2D(Tex, t4);

	float f = s1 + s2 + s3 + s4 - 4 * hv.x;

	hv -= 0.5;

	hv.y += 0.1 * f;
	hv.x += 0.6 * hv.y;

	hv *= 0.985;

	hv.z = 0.25 * (s1 + s2 - s3 - s4); // sobelX
	hv.w = 0.25 * (s1 - s2 + s3 - s4); // sobelY

	hv += 0.5;

	return hv;
}
